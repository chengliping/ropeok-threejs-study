#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const url = require('url');
const webConfig = require('../config/websocket-config');
const config = require('../config/config');
const WebSocket = require('ws');
const net = require('net');
function createServer(port){
  const createApp = require('./app');
  const app = createApp(port);
  app.set('port', port);
  app.port = port;
  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);
  for (const webConfigItem of webConfig) {
    const ws = new WebSocket.Server({ noServer: true });
    ws.on('connection', function connection (client) {
      const apiString = JSON.stringify(webConfigItem.json);
      client.send(apiString);
      setInterval(() => {
        client.send(apiString);
      }, 10000);
    });
    webConfigItem.server = ws;
  }

  server.on('upgrade', function upgrade (request, socket, head) {
    const pathname = url.parse(request.url).pathname;
    let isWs = false;
    for (const webConfigItem of webConfig) {
      if (pathname.indexOf(webConfigItem.path) !== -1) {
        webConfigItem.server.handleUpgrade(request, socket, head, function done (ws) {
          webConfigItem.server.emit('connection', ws, request);
        });
        isWs = true;
      }
    }
    if (isWs) return;

    socket.destroy();
  });
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError (error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening () {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    console.log('Listening on ' + bind);
  }
}

function portInUse(port){
  return new Promise((resolve, reject)=>{
    const server = net.createServer().listen(port);
    server.on('listening', function(){
      server.close();
      resolve(port);
    });
    server.on('error', function(err){
      resolve(err);
    });
  });
}

const getPort = async function (port) {
  const res = await portInUse(port);
  if (res instanceof Error) {
    port++;
    port = await getPort(port);
  }

  return port;
};
async function main(){
  const port = await getPort(config.api_local_port);
  if (port !== config.api_local_port){
    console.error(`请注意api端口${config.api_local_port}占用，自动更改为:${port}，\n请更改vue.config.js代理的端口,并重新npm start`);
  }
  createServer(port);
}
main().catch(e => console.error(e));
